import { EventEmitter } from "events";
import uid from "shortid";
import Node from "./Node";
const del = Symbol.for("delete");
export default class Tree extends EventEmitter {

    constructor(id) {
        super();
        this._id = id || uid();
        this._rootIds = new Set();
        this._map = new Map();
        var self = this;
        class NodeImpl extends Node {
            constructor(data) {
                super(data);
            }
            get _tree() {
                return self;
            }
        }
        this._Node = NodeImpl;
    }

    get Node() {
        return this._Node;
    }

    get id() {
        return this._id;
    }

    get json() {
        let map = {};
        for (let [id, node] of this._map) {
            map[id] = node.json;
        }
        return {
            id: this.id,
            rootIds: [...this._rootIds],
            map
        };
    }

    static parse(json) {
        const { id, rootIds, map } = json;
        const tree = new this(id);
        tree._rootIds = new Set(rootIds);
        for (let id in map) {
            let json = map[id];
            let node = tree.Node.parse(json);
            tree._map.set(id, node);
        }
    }

    get(id) {
        return this._map.get(id);
    }

    get rootIds() {
        return Array.from(this._rootIds);
    }

    get roots() {
        return this.rootIds.map(id => this.get(id));
    }

    add(node) {
        if (node instanceof this.Node) {
            this._map.set(node.id, node);
            this._rooting(node.id);
            this.emit("add", node);
        } else {
            throw new Error("different Node class!")
        }
    }

    create(parentId, data) {
        if (typeof parentId === "string") {
            let parent = this.get(parentId);
            return parent.createChild(data);
        } else {
            data = parentId;
            return new this.Node(data);
        }
    }

    [del](id) {
        this._map.delete(id);
        this.emit("delete", id);
    }

    _rooting(id) {
        let node = this.get(id);
        if (node) {
            if (node.parentId) {
                this._rootIds.delete(id);
            } else {
                this._rootIds.add(id);
            }
        } else {
            this._rootIds.delete(id);
        }
    }

}