"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _events = require("events");

var _shortid = _interopRequireDefault(require("shortid"));

var _Node = _interopRequireDefault(require("./Node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const del = Symbol.for("delete");

class Tree extends _events.EventEmitter {
  constructor(id) {
    super();
    this._id = id || (0, _shortid.default)();
    this._rootIds = new Set();
    this._map = new Map();
    var self = this;

    class NodeImpl extends _Node.default {
      constructor(data) {
        super(data);
      }

      get _tree() {
        return self;
      }

    }

    this._Node = NodeImpl;
  }

  get Node() {
    return this._Node;
  }

  get id() {
    return this._id;
  }

  get json() {
    let map = {};

    for (let [id, node] of this._map) {
      map[id] = node.json;
    }

    return {
      id: this.id,
      rootIds: [...this._rootIds],
      map
    };
  }

  static parse(json) {
    const {
      id,
      rootIds,
      map
    } = json;
    const tree = new this(id);
    tree._rootIds = new Set(rootIds);

    for (let id in map) {
      let json = map[id];
      let node = tree.Node.parse(json);

      tree._map.set(id, node);
    }
  }

  get(id) {
    return this._map.get(id);
  }

  get rootIds() {
    return Array.from(this._rootIds);
  }

  get roots() {
    return this.rootIds.map(id => this.get(id));
  }

  add(node) {
    if (node instanceof this.Node) {
      this._map.set(node.id, node);

      this._rooting(node.id);

      this.emit("add", node);
    } else {
      throw new Error("different Node class!");
    }
  }

  create(parentId, data) {
    if (typeof parentId === "string") {
      let parent = this.get(parentId);
      return parent.createChild(data);
    } else {
      data = parentId;
      return new this.Node(data);
    }
  }

  [del](id) {
    this._map.delete(id);

    this.emit("delete", id);
  }

  _rooting(id) {
    let node = this.get(id);

    if (node) {
      if (node.parentId) {
        this._rootIds.delete(id);
      } else {
        this._rootIds.add(id);
      }
    } else {
      this._rootIds.delete(id);
    }
  }

}

exports.default = Tree;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UcmVlLmpzIl0sIm5hbWVzIjpbImRlbCIsIlN5bWJvbCIsImZvciIsIlRyZWUiLCJFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsImlkIiwiX2lkIiwiX3Jvb3RJZHMiLCJTZXQiLCJfbWFwIiwiTWFwIiwic2VsZiIsIk5vZGVJbXBsIiwiTm9kZSIsImRhdGEiLCJfdHJlZSIsIl9Ob2RlIiwianNvbiIsIm1hcCIsIm5vZGUiLCJyb290SWRzIiwicGFyc2UiLCJ0cmVlIiwic2V0IiwiZ2V0IiwiQXJyYXkiLCJmcm9tIiwicm9vdHMiLCJhZGQiLCJfcm9vdGluZyIsImVtaXQiLCJFcnJvciIsImNyZWF0ZSIsInBhcmVudElkIiwicGFyZW50IiwiY3JlYXRlQ2hpbGQiLCJkZWxldGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUNBLE1BQU1BLEdBQUcsR0FBR0MsTUFBTSxDQUFDQyxHQUFQLENBQVcsUUFBWCxDQUFaOztBQUNlLE1BQU1DLElBQU4sU0FBbUJDLG9CQUFuQixDQUFnQztBQUUzQ0MsRUFBQUEsV0FBVyxDQUFDQyxFQUFELEVBQUs7QUFDWjtBQUNBLFNBQUtDLEdBQUwsR0FBV0QsRUFBRSxJQUFJLHVCQUFqQjtBQUNBLFNBQUtFLFFBQUwsR0FBZ0IsSUFBSUMsR0FBSixFQUFoQjtBQUNBLFNBQUtDLElBQUwsR0FBWSxJQUFJQyxHQUFKLEVBQVo7QUFDQSxRQUFJQyxJQUFJLEdBQUcsSUFBWDs7QUFDQSxVQUFNQyxRQUFOLFNBQXVCQyxhQUF2QixDQUE0QjtBQUN4QlQsTUFBQUEsV0FBVyxDQUFDVSxJQUFELEVBQU87QUFDZCxjQUFNQSxJQUFOO0FBQ0g7O0FBQ0QsVUFBSUMsS0FBSixHQUFZO0FBQ1IsZUFBT0osSUFBUDtBQUNIOztBQU51Qjs7QUFRNUIsU0FBS0ssS0FBTCxHQUFhSixRQUFiO0FBQ0g7O0FBRUQsTUFBSUMsSUFBSixHQUFXO0FBQ1AsV0FBTyxLQUFLRyxLQUFaO0FBQ0g7O0FBRUQs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QUFLSyxHQUFMLENBQVNuQixFQUFULENBQVg7O0FBQ0EsUUFBSWMsSUFBSixFQUFVO0FBQ04sVUFBSUEsSUFBSSxDQUFDYyxRQUFULEVBQW1CO0FBQ2YsYUFBSzFCLFFBQUwsQ0FBYzZCLE1BQWQsQ0FBcUIvQixFQUFyQjtBQUNILE9BRkQsTUFFTztBQUNILGFBQUtFLFFBQUwsQ0FBY3FCLEdBQWQsQ0FBa0J2QixFQUFsQjtBQUNIO0FBQ0osS0FORCxNQU1PO0FBQ0gsV0FBS0UsUUFBTCxDQUFjNkIsTUFBZCxDQUFxQi9CLEVBQXJCO0FBQ0g7QUFDSjs7QUFsRzBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50c1wiO1xuaW1wb3J0IHVpZCBmcm9tIFwic2hvcnRpZFwiO1xuaW1wb3J0IE5vZGUgZnJvbSBcIi4vTm9kZVwiO1xuY29uc3QgZGVsID0gU3ltYm9sLmZvcihcImRlbGV0ZVwiKTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyZWUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXG4gICAgY29uc3RydWN0b3IoaWQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5faWQgPSBpZCB8fCB1aWQoKTtcbiAgICAgICAgdGhpcy5fcm9vdElkcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNsYXNzIE5vZGVJbXBsIGV4dGVuZHMgTm9kZSB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZXQgX3RyZWUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fTm9kZSA9IE5vZGVJbXBsO1xuICAgIH1cblxuICAgIGdldCBOb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fTm9kZTtcbiAgICB9XG5cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG5cbiAgICBnZXQganNvbigpIHtcbiAgICAgICAgbGV0IG1hcCA9IHt9O1xuICAgICAgICBmb3IgKGxldCBbaWQsIG5vZGVdIG9mIHRoaXMuX21hcCkge1xuICAgICAgICAgICAgbWFwW2lkXSA9IG5vZGUuanNvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICByb290SWRzOiBbLi4udGhpcy5fcm9vdElkc10sXG4gICAgICAgICAgICBtYXBcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcGFyc2UoanNvbikge1xuICAgICAgICBjb25zdCB7IGlkLCByb290SWRzLCBtYXAgfSA9IGpzb247XG4gICAgICAgIGNvbnN0IHRyZWUgPSBuZXcgdGhpcyhpZCk7XG4gICAgICAgIHRyZWUuX3Jvb3RJZHMgPSBuZXcgU2V0KHJvb3RJZHMpO1xuICAgICAgICBmb3IgKGxldCBpZCBpbiBtYXApIHtcbiAgICAgICAgICAgIGxldCBqc29uID0gbWFwW2lkXTtcbiAgICAgICAgICAgIGxldCBub2RlID0gdHJlZS5Ob2RlLnBhcnNlKGpzb24pO1xuICAgICAgICAgICAgdHJlZS5fbWFwLnNldChpZCwgbm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcC5nZXQoaWQpO1xuICAgIH1cblxuICAgIGdldCByb290SWRzKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9yb290SWRzKTtcbiAgICB9XG5cbiAgICBnZXQgcm9vdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3RJZHMubWFwKGlkID0+IHRoaXMuZ2V0KGlkKSk7XG4gICAgfVxuXG4gICAgYWRkKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiB0aGlzLk5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5zZXQobm9kZS5pZCwgbm9kZSk7XG4gICAgICAgICAgICB0aGlzLl9yb290aW5nKG5vZGUuaWQpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiYWRkXCIsIG5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGlmZmVyZW50IE5vZGUgY2xhc3MhXCIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGUocGFyZW50SWQsIGRhdGEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJlbnRJZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbGV0IHBhcmVudCA9IHRoaXMuZ2V0KHBhcmVudElkKTtcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQuY3JlYXRlQ2hpbGQoZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhID0gcGFyZW50SWQ7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMuTm9kZShkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFtkZWxdKGlkKSB7XG4gICAgICAgIHRoaXMuX21hcC5kZWxldGUoaWQpO1xuICAgICAgICB0aGlzLmVtaXQoXCJkZWxldGVcIiwgaWQpO1xuICAgIH1cblxuICAgIF9yb290aW5nKGlkKSB7XG4gICAgICAgIGxldCBub2RlID0gdGhpcy5nZXQoaWQpO1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50SWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yb290SWRzLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RJZHMuYWRkKGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Jvb3RJZHMuZGVsZXRlKGlkKTtcbiAgICAgICAgfVxuICAgIH1cblxufSJdfQ==