const should = require("should");

describe("", function () {
    const { Tree } = require("../");
    const tree = new Tree();
    const Node = tree.Node;

    it("#new", function () {
        var n1 = new Node();
        should.exist(n1.id);
    });

    it("#addChild", function () {
        var node = new Node();
        var child = new Node({ id: "002", name: "leo" });
        node.addChild(child);
        node.childIds.length.should.eql(1);
        node.childIds[0].should.eql("002")
    });

    it("#createChild", function () {
        var node = new Node();
        var child = node.createChild({ id: "003" });
        node.childIds.length.should.eql(1);
        node.childIds[0].should.eql("003");
        child.layer.should.eql(1);
        child.parentId.should.eql(node.id);
        child.rootId.should.eql(node.id);
    })

    it("#moveTo && #remove", function () {
        var node = new Node();
        var child = node.createChild({ id: "003" });

        var n1 = child.createChild({ id: 1 })
        var n2 = child.createChild({ id: 2 })
        var n3 = child.createChild({ id: 3 })

        n1.layer.should.eql(2)
        n2.layer.should.eql(2)
        n3.layer.should.eql(2)
        node.childIds.length.should.eql(1);

        child.moveTo();

        n1.layer.should.eql(1)
        n2.layer.should.eql(1)
        n3.layer.should.eql(1)

        node.childIds.length.should.eql(0);
        child.childIds.length.should.eql(3);
        n2.remove();
        child.childIds.length.should.eql(2);

    });

});